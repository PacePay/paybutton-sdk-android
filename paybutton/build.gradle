plugins{
    id 'com.android.library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
}

group = 'com.github.payskyCompany'

android {
    compileSdk 34
    defaultConfig {
        minSdkVersion 19
        targetSdk 34
        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }


    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    namespace 'com.example.paybutton'
}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'org.greenrobot:eventbus:3.3.1'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.pnikosis:materialish-progress:1.7'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.github.prashantsolanki3:Secure-Pref-Manager:0.25'
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'org.simpleframework:simple-xml:2.7.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'
    implementation 'com.mobprofs:retrofit-simplexmlconverter:1.1'
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
    implementation files('libs/magnetictrackparser-2.01.02.jar')
    implementation files('libs/platform_sdk_v2.4.0210.jar')
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    implementation 'io.card:android-sdk:5.5.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation('com.github.ihsanbal:LoggingInterceptor:2.0.2') {
        exclude group: 'org.json', module: 'json'
    }
    configurations.configureEach {
        resolutionStrategy {
            force("com.google.code.gson:gson:2.8.5")
            force("com.squareup.retrofit2:converter-gson:2.5.0")
            force("com.squareup.retrofit2:retrofit:2.7.0")
            force("org.greenrobot:eventbus:3.1.1")
        }
    }
    implementation 'com.noveogroup.android:android-logger:1.3.5'
    implementation 'com.parse.bolts:bolts-android:1.1.2'
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'commons-io:commons-io:2.13.0'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.payskyCompany'
            artifactId = 'paybutton-sdk'
            version = "4.0.0"
            pom {
                description = 'fixed bug'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}
tasks.withType(PublishToMavenRepository).configureEach { task ->
    def predicate = provider {
        def externalRepo = publishing.repositories.findByName('external')
        def internalRepo = publishing.repositories.findByName('internal')
        def binaryPublication = publishing.publications.findByName('binary')
        def binaryAndSourcesPublication = publishing.publications.findByName('binaryAndSources')

        (task.repository == externalRepo && task.publication == binaryPublication) ||
                (task.repository == internalRepo && task.publication == binaryAndSourcesPublication)
    }
    onlyIf {
        predicate.getOrElse(false)
    }
}

tasks.withType(PublishToMavenLocal).configureEach { task ->
    def predicate = provider {
        def binaryAndSourcesPublication = publishing.publications.findByName('binaryAndSources')
        task.publication == binaryAndSourcesPublication
    }
    onlyIf {
        predicate.getOrElse(false)
    }
}
